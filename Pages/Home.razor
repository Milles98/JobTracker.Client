@page "/"
@using JobTracker.Client.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

@if (showCompletedNotification)
{
    <div class="position-fixed top-50 start-50 translate-middle" style="z-index: 1100; min-width: 300px;">
        <div class="toast show align-items-center text-bg-success border-0 shadow-lg" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex justify-content-center">
                <div class="toast-body text-center">
                    @encouragementMessage
                </div>
            </div>
        </div>
    </div>
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-10">
            <div class="row g-5 flex-column">
                <div class="col">
                    <h3>Lägg till nytt jobb</h3>
                    <EditForm Model="@newJob" OnValidSubmit="@CreateJobAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label">Företag</label>
                            <InputText class="@(companyExists ? "form-control is-invalid" : "form-control")"
                                       @bind-Value="newJob.CompanyName"
                                       @oninput="CheckCompanyExists" />
                            @if (companyExists)
                            {
                                <div class="invalid-feedback">
                                    Företaget verkar redan finnas.
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Titel</label>
                            <InputText class="form-control" @bind-Value="newJob.Title" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">URL</label>
                            <InputText class="form-control" @bind-Value="newJob.Url" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Anteckningar</label>
                            <InputTextArea class="form-control" @bind-Value="newJob.Notes" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Bekräftelsekod</label>
                            <InputText class="form-control" @bind-Value="createConfirmationCode" placeholder="Skriv koden för att spara" />
                        </div>
                        <button type="submit" class="btn btn-primary" disabled="@(!IsCreateConfirmationValid)">Spara jobb</button>
                    </EditForm>
                </div>

                <div class="col">
                    <h3>Sökta jobb</h3>
                    @if (applications is null)
                    {
                        <p>Laddar jobb...</p>
                    }
                    else if (!applications.Any())
                    {
                        <p>Inga jobb hittades.</p>
                    }
                    else
                    {
                        <div class="table-responsive-md">
                            <table class="table table-striped table-hover align-middle">
                                <thead>
                                    <tr>
                                        <th>Företag</th>
                                        <th>Titel</th>
                                        <th>
                                            <button class="btn btn-link p-0 text-decoration-none d-inline-flex align-items-center" @onclick="ToggleSort">
                                                <span>Datum</span>
                                                <span class="ms-1">@((sortDescending ? "↓" : "↑"))</span>
                                            </button>
                                        </th>
                                        <th>Status</th>
                                        <th>URL</th>
                                        <th style="max-width: 200px;">Anteckningar</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var app in SortedApplications)
                                    {
                                        <tr style="cursor:pointer;" @onclick="() => EditJob(app)">
                                            <td class="text-truncate" style="max-width: 150px;">@app.CompanyName</td>
                                            <td class="text-truncate" style="max-width: 150px;">@app.Title</td>
                                            <td class="text-nowrap" style="min-width: 120px;">@app.ApplicationDate.ToString("yyyy-MM-dd")</td>
                                            <td>
                                                <span class="@GetStatusClass(app.Status)">
                                                    @app.Status
                                                </span>
                                            </td>
                                            <td class="text-truncate" style="max-width: 100px;">
                                                @if (!string.IsNullOrWhiteSpace(app.Url))
                                                {
                                                    <a href="@app.Url" target="_blank" rel="noopener noreferrer">@app.Url</a>
                                                }
                                            </td>
                                            <td class="text-truncate" style="max-width: 200px;">@(TruncateNotes(app.Notes, 50))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    @if (selectedJob is not null)
                    {
                        <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Redigera jobb</h5>
                                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="mb-3">
                                            <strong>Företag:</strong> @selectedJob.CompanyName
                                        </div>
                                        <div class="mb-3">
                                            <strong>Titel:</strong> @selectedJob.Title
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Url</label>
                                            <InputText class="form-control" @bind-Value="editJob.Url" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Anteckningar</label>
                                            <textarea class="form-control"
                                                      @bind="editJob.Notes"
                                                      style="height:auto; min-height: 100px;"
                                                      rows="@editJob.Notes?.Split('\n').Length + 1">
                                                    </textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Status</label>
                                            <InputSelect class="form-control" @bind-Value="editJob.Status">
                                                <option value="Skickat">Skickat</option>
                                                <option value="Ansökt">Ansökt</option>
                                                <option value="Intervju">Intervju</option>
                                                <option value="Avslutat">Avslutat</option>
                                                <option value="Anställt">Anställt</option>
                                            </InputSelect>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Bekräftelsekod</label>
                                            <InputText class="form-control" @bind-Value="confirmationCode" placeholder="Skriv koden för att spara eller ta bort" />
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-secondary" @onclick="CloseModal">Avbryt</button>
                                        <button class="btn btn-danger" @onclick="DeleteJobAsync" disabled="@(!IsConfirmationValid)">Ta bort</button>
                                        <button class="btn btn-primary" @onclick="UpdateJobAsync" disabled="@(!IsConfirmationValid)">Spara ändringar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private CreateJobRequest newJob = new();
    private List<JobApplicationDto>? applications;
    private UpdateJobRequest editJob = new();
    private JobApplicationDto? selectedJob;
    private bool companyExists = false;
    private bool showCompletedNotification = false;
    private DateTime? completedDate = null;
    private string confirmationCode = string.Empty;
    private const string RequiredConfirmationCode = "ok";
    private string createConfirmationCode = string.Empty;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    private string encouragementMessage = string.Empty;

    private bool IsCreateConfirmationValid => createConfirmationCode.Trim().ToLowerInvariant() == RequiredConfirmationCode;
    private bool IsConfirmationValid => confirmationCode.Trim().ToLowerInvariant() == RequiredConfirmationCode;

    protected override async Task OnInitializedAsync()
    {
        await LoadApplicationsAsync();
    }

    private async Task LoadApplicationsAsync()
    {
        applications = await Http.GetFromJsonAsync<List<JobApplicationDto>>("api/Jobs");
    }

    private async Task CreateJobAsync()
    {
        if (createConfirmationCode.Trim().ToLowerInvariant() != RequiredConfirmationCode)
        {
            await JS.InvokeVoidAsync("alert", "Fel bekräftelsekod. Skriv koden för att spara nytt jobb.");
            return;
        }

        var response = await Http.PostAsJsonAsync("api/Jobs", newJob);

        if (response.IsSuccessStatusCode)
        {
            newJob = new();
            createConfirmationCode = string.Empty; // Rensa kodfältet
            await LoadApplicationsAsync();
            CheckDailyCompletion();
        }
    }

    private void OpenModal(JobApplicationDto job)
    {
        selectedJob = job;
        editJob = new UpdateJobRequest
            {
                Status = job.Status,
                Notes = job.Notes,
                Url = job.Url
            };
    }


    private void EditJob(JobApplicationDto job)
    {
        selectedJob = job;
        editJob = new UpdateJobRequest
            {
                Status = job.Status,
                Notes = job.Notes,
                Url = job.Url
            };
    }

    private void CloseModal()
    {
        selectedJob = null;
        confirmationCode = string.Empty;
    }

    private async Task UpdateJobAsync()
    {
        if (confirmationCode.Trim().ToLowerInvariant() != RequiredConfirmationCode)
        {
            await JS.InvokeVoidAsync("alert", "Fel bekräftelsekod. Skriv koden för att spara ändringar.");
            return;
        }

        if (selectedJob is not null)
        {
            var update = new UpdateJobRequest
                {
                    Status = editJob.Status,
                    Notes = editJob.Notes,
                    Url = editJob.Url
                };

            var response = await Http.PutAsJsonAsync($"https://jobtracker-api-mille.azurewebsites.net/api/Jobs/{selectedJob.Id}", update);

            if (response.IsSuccessStatusCode)
            {
                await LoadApplicationsAsync();
                CloseModal();
            }
        }
    }

    private async Task DeleteJobAsync()
    {
        if (confirmationCode.Trim().ToLowerInvariant() != RequiredConfirmationCode)
        {
            await JS.InvokeVoidAsync("alert", "Fel bekräftelsekod. Skriv koden för att ta bort.");
            return;
        }

        if (selectedJob is not null)
        {
            var response = await Http.DeleteAsync($"https://jobtracker-api-mille.azurewebsites.net/api/Jobs/{selectedJob.Id}");

            if (response.IsSuccessStatusCode)
            {
                await LoadApplicationsAsync();
                CloseModal();
            }
        }
    }

    private string GetStatusClass(string status) =>
    status switch
    {
        "Ansökt" => "badge bg-primary",
        "Skickat" => "badge bg-info",
        "Intervju" => "badge bg-warning text-dark",
        "Avslutat" => "badge bg-danger",
        "Anställt" => "badge bg-success",
        _ => "badge bg-secondary"
    };

    private string TruncateNotes(string? notes, int maxLength)
    {
        if (string.IsNullOrEmpty(notes))
            return string.Empty;

        return notes.Length <= maxLength ? notes : notes.Substring(0, maxLength) + "...";
    }

    private bool sortDescending = true;

    private IEnumerable<JobApplicationDto> SortedApplications =>
        sortDescending
            ? applications.OrderByDescending(a => a.ApplicationDate)
            : applications.OrderBy(a => a.ApplicationDate);

    private void ToggleSort()
    {
        sortDescending = !sortDescending;
    }

    private void CheckCompanyExists(ChangeEventArgs e)
    {
        var input = e.Value?.ToString()?.Trim().ToLowerInvariant() ?? string.Empty;

        if (string.IsNullOrEmpty(input) || input.Length < 3)
        {
            companyExists = false;
            return;
        }

        companyExists = applications?.Any(app =>
            !string.IsNullOrWhiteSpace(app.CompanyName) &&
            app.CompanyName.Trim().ToLowerInvariant().StartsWith(input.Substring(0, Math.Min(5, input.Length)))
        ) ?? false;
    }

    private void CheckDailyCompletion()
    {
        var today = DateTime.Today;
        var todaysJobs = applications
            ?.Where(j => j.ApplicationDate.Date == today)
            .ToList();

        var count = todaysJobs?.Count ?? 0;

        encouragementMessage = count switch
        {
            1 => "Bra jobbat! Första ansökan för idag ✔",
            2 => "Snyggt! Två ansökningar skickade 💪",
            3 => "Du är på gång – tre ansökningar! 🚀",
            4 => "Nästan där! Fyra jobb idag 🔥",
            5 => $"✔ Du har loggat 5 jobb för {today:yyyy-MM-dd}! Check på den ✔",
            6 => $"Du har loggat fler jobb än tänkt, bra jobbat! Måste varit ett spännande jobb",
            _ when count > 6 => $"Otroligt! {count} jobb idag – grymt fokus! 🏆",
            _ => string.Empty
        };

        showCompletedNotification = count >= 1 && count <= 6;
        completedDate = today;

        if (showCompletedNotification)
        {
            _ = Task.Run(async () =>
            {
                await Task.Delay(5000);
                showCompletedNotification = false;
                encouragementMessage = string.Empty;
                StateHasChanged();
            });
        }
    }
}

